basePath: /
definitions:
  model.Book:
    properties:
      active:
        example: true
        type: boolean
      author:
        type: string
      book_name:
        example: panchtantra
        type: string
      created_at:
        type: string
      created_by:
        example: vishal
        type: string
      deleted_at:
        type: string
      deleted_by:
        type: string
      edition_number:
        example: 2
        type: integer
      id:
        type: string
      publisher:
        type: string
      school_id:
        type: string
      updated_at:
        type: string
      updated_by:
        type: string
    required:
    - active
    - author
    - book_name
    - created_by
    - edition_number
    - publisher
    - school_id
    type: object
  model.Class:
    properties:
      active:
        description: active is used to see user is active or not active.
        example: true
        type: boolean
      class_monitor:
        type: string
      class_name:
        example: class-10
        type: string
      created_at:
        type: string
      created_by:
        example: user
        type: string
      delete_by:
        example: admin
        type: string
      deleted_at:
        type: string
      floor_number:
        example: 10
        type: integer
      id:
        type: string
      number_of_bench:
        example: 10
        type: integer
      number_of_student:
        example: 10
        type: integer
      teacher_id:
        example: e9138023-1301081301
        type: string
      updated_at:
        type: string
      updated_by:
        example: admin
        type: string
    required:
    - class_name
    - floor_number
    - number_of_bench
    - number_of_student
    - teacher_id
    type: object
  model.College:
    properties:
      active:
        description: active is used to see user is active or not active.
        example: true
        type: boolean
      admin_id:
        type: string
      city:
        type: string
      created_at:
        type: string
      created_by:
        example: user
        type: string
      delete_by:
        example: admin
        type: string
      deleted_at:
        type: string
      director_id:
        example: e9138023-1301081301
        type: string
      district:
        type: string
      domain:
        example: noble
        type: string
      hostel:
        type: boolean
      id:
        type: string
      lane:
        type: string
      pincode:
        type: integer
      principle_id:
        type: string
      state:
        type: string
      university_type:
        example: private college
        type: string
      updated_at:
        type: string
      updated_by:
        example: admin
        type: string
      village:
        type: string
    required:
    - city
    - director_id
    - district
    - domain
    - hostel
    - pincode
    - state
    - university_type
    type: object
  model.ComputerLab:
    properties:
      active:
        example: true
        type: boolean
      class_name:
        example: Advanced Programming
        type: string
      classroom_number:
        example: C-202
        type: string
      created_at:
        type: string
      created_by:
        example: admin
        type: string
      deleted_at:
        type: string
      deleted_by:
        type: string
      id:
        type: string
      instructor:
        example: John Doe
        type: string
      school_id:
        type: string
      syllabus:
        example: Introduction to Python, Data Structures
        type: string
      total_students:
        example: 30
        type: integer
      updated_at:
        type: string
      updated_by:
        type: string
    required:
    - active
    - class_name
    - classroom_number
    - created_by
    - instructor
    - school_id
    - syllabus
    - total_students
    type: object
  model.Course:
    properties:
      active:
        example: true
        type: boolean
      course_name:
        example: Full Stack Development
        type: string
      created_at:
        type: string
      created_by:
        example: admin
        type: string
      credits:
        description: Course credits
        example: 3
        type: integer
      deleted_at:
        type: string
      deleted_by:
        type: string
      description:
        example: An advanced course covering both front-end and back-end development.
        type: string
      duration_weeks:
        description: Duration in weeks
        example: 12
        type: integer
      end_date:
        type: string
      fee:
        example: 15000
        type: number
      id:
        type: string
      instructor:
        example: Jane Doe
        type: string
      school_id:
        type: string
      start_date:
        type: string
      syllabus:
        example: HTML, CSS, JavaScript, React, Node.js, Databases
        type: string
      updated_at:
        type: string
      updated_by:
        type: string
    required:
    - active
    - course_name
    - created_by
    - credits
    - description
    - duration_weeks
    - end_date
    - fee
    - instructor
    - school_id
    - start_date
    - syllabus
    type: object
  model.ErrorResponse:
    properties:
      error:
        type: string
    type: object
  model.Teacher:
    properties:
      active:
        description: active is used to see user is active or not active.
        example: true
        type: boolean
      created_at:
        type: string
      created_by:
        example: user
        type: string
      delete_by:
        example: admin
        type: string
      deleted_at:
        type: string
      first_name:
        type: string
      id:
        type: string
      join_date:
        type: string
      last_name:
        type: string
      salary:
        type: integer
      skills:
        type: string
      subject_code:
        example: e9138023-1301081301
        type: string
      teacher_id:
        example: e9138023-1301081301
        type: string
      teacher_type:
        example: assistant
        type: string
      updated_at:
        type: string
      updated_by:
        example: admin
        type: string
    required:
    - join_date
    - salary
    - subject_code
    - teacher_id
    - teacher_type
    type: object
  model.User:
    properties:
      active:
        description: |-
          Name      Name      `gorm:"embedded" json:"name" binding:"required"` // gorm:embedded to add name and address struct to main struct.
          Address   Address   `gorm:"embedded" json:"address" binding:"required"`
        example: true
        type: boolean
      city:
        type: string
      created_at:
        type: string
      created_by:
        example: user
        type: string
      delete_by:
        example: admin
        type: string
      deleted_at:
        type: string
      district:
        type: string
      email:
        type: string
      first_name:
        type: string
      id:
        type: string
      lane:
        type: string
      last_name:
        type: string
      password:
        type: string
      pincode:
        type: integer
      state:
        type: string
      type:
        type: string
      updated_at:
        type: string
      updated_by:
        example: admin
        type: string
      village:
        type: string
    required:
    - email
    - password
    type: object
  model.UserSignIn:
    properties:
      emailid:
        type: string
      password:
        type: string
    required:
    - emailid
    - password
    type: object
host: localhost:8000
info:
  contact: {}
  description: APIs to manage School operations
  title: School-Management
  version: "1.0"
paths:
  /Book/{id}:
    get:
      parameters:
      - description: Book ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Book'
      security:
      - ApiKeyAuth: []
      summary: Get a Book by ID
      tags:
      - Book
  /Book/create:
    post:
      consumes:
      - application/json
      parameters:
      - description: Book object
        in: body
        name: Book
        required: true
        schema:
          $ref: '#/definitions/model.Book'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/model.Book'
      security:
      - ApiKeyAuth: []
      summary: Create a new Book
      tags:
      - Book
  /Book/delete/{id}:
    delete:
      parameters:
      - description: Book ID
        in: path
        name: id
        required: true
        type: string
      responses: {}
      security:
      - ApiKeyAuth: []
      summary: Delete a Book
      tags:
      - Book
  /Book/filter:
    get:
      parameters:
      - description: Book Name
        in: query
        name: book_name
        type: string
      - description: School ID
        in: query
        name: school_id
        type: string
      - description: Active status
        in: query
        name: active
        type: boolean
      - description: Created By
        in: query
        name: created_by
        type: string
      - description: Updated By
        in: query
        name: updated_by
        type: string
      - description: Book ID
        in: query
        name: book_id
        type: string
      - description: Publisher
        in: query
        name: publisher
        type: string
      - description: Author
        in: query
        name: author
        type: string
      - description: Edition Number
        in: query
        name: edition_number
        type: integer
      - description: 'Page number (default: 1)'
        in: query
        name: page
        type: integer
      - description: 'Number of results per page (default: 10)'
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.Book'
            type: array
      security:
      - ApiKeyAuth: []
      summary: Get Books based on given filters
      tags:
      - Book
  /Book/getBooks:
    get:
      parameters:
      - description: 'Page number (default: 1)'
        in: query
        name: page
        type: integer
      - description: 'Number of results per page (default: 10)'
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.Book'
            type: array
      security:
      - ApiKeyAuth: []
      summary: Get all Books
      tags:
      - Book
  /Book/update/{id}:
    put:
      consumes:
      - application/json
      parameters:
      - description: Book ID
        in: path
        name: id
        required: true
        type: string
      - description: Book object
        in: body
        name: Book
        required: true
        schema:
          $ref: '#/definitions/model.Book'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Book'
      security:
      - ApiKeyAuth: []
      summary: Update a Book
      tags:
      - Book
  /Class/{id}:
    get:
      parameters:
      - description: Class ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Class'
      security:
      - ApiKeyAuth: []
      summary: Get a Class by ID
      tags:
      - Class
  /Class/create:
    post:
      consumes:
      - application/json
      parameters:
      - description: Class object
        in: body
        name: class
        required: true
        schema:
          $ref: '#/definitions/model.Class'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/model.Class'
      security:
      - ApiKeyAuth: []
      summary: Create a new Class
      tags:
      - Class
  /Class/delete/{id}:
    delete:
      parameters:
      - description: Class ID
        in: path
        name: id
        required: true
        type: string
      responses: {}
      security:
      - ApiKeyAuth: []
      summary: Delete a Class
      tags:
      - Class
  /Class/filter:
    get:
      parameters:
      - description: Class Name
        in: query
        name: class_name
        type: string
      - description: Active status
        in: query
        name: active
        type: boolean
      - description: Created By
        in: query
        name: created_by
        type: string
      - description: Updated By
        in: query
        name: updated_by
        type: string
      - description: Teacher ID
        in: query
        name: teacher_id
        type: string
      - description: Class Monitor
        in: query
        name: class_monitor
        type: string
      - description: Floor Number
        in: query
        name: floor_number
        type: integer
      - description: 'Page number (default: 1)'
        in: query
        name: page
        type: integer
      - description: 'Number of results per page (default: 10)'
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.Class'
            type: array
      security:
      - ApiKeyAuth: []
      summary: Get Classes based on given filters
      tags:
      - Class
  /Class/getClasses:
    get:
      parameters:
      - description: 'Page number (default: 1)'
        in: query
        name: page
        type: integer
      - description: 'Number of results per page (default: 10)'
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.Class'
            type: array
      security:
      - ApiKeyAuth: []
      summary: Get all Classes
      tags:
      - Class
  /Class/update/{id}:
    put:
      consumes:
      - application/json
      parameters:
      - description: Class ID
        in: path
        name: id
        required: true
        type: string
      - description: Class object
        in: body
        name: class
        required: true
        schema:
          $ref: '#/definitions/model.Class'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Class'
      security:
      - ApiKeyAuth: []
      summary: Update a Class
      tags:
      - Class
  /ComputerLab/{id}:
    get:
      parameters:
      - description: ComputerLab ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.ComputerLab'
      security:
      - ApiKeyAuth: []
      summary: Get a ComputerLab by ID
      tags:
      - ComputerLab
  /ComputerLab/create:
    post:
      consumes:
      - application/json
      parameters:
      - description: ComputerLab object
        in: body
        name: ComputerLab
        required: true
        schema:
          $ref: '#/definitions/model.ComputerLab'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/model.ComputerLab'
      security:
      - ApiKeyAuth: []
      summary: Create a new ComputerLab
      tags:
      - ComputerLab
  /ComputerLab/delete/{id}:
    delete:
      parameters:
      - description: ComputerLab ID
        in: path
        name: id
        required: true
        type: string
      responses: {}
      security:
      - ApiKeyAuth: []
      summary: Delete a ComputerLab
      tags:
      - ComputerLab
  /ComputerLab/filter:
    get:
      parameters:
      - description: Class Name
        in: query
        name: class_name
        type: string
      - description: School ID
        in: query
        name: school_id
        type: string
      - description: Active status
        in: query
        name: active
        type: boolean
      - description: Instructor
        in: query
        name: instructor
        type: string
      - description: Total Students
        in: query
        name: total_students
        type: integer
      - description: Classroom Number
        in: query
        name: classroom_number
        type: string
      - description: Syllabus
        in: query
        name: syllabus
        type: string
      - description: Created By
        in: query
        name: created_by
        type: string
      - description: Updated By
        in: query
        name: updated_by
        type: string
      - description: ComputerLab ID
        in: query
        name: computerlab_id
        type: string
      - description: 'Page number (default: 1)'
        in: query
        name: page
        type: integer
      - description: 'Number of results per page (default: 10)'
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.ComputerLab'
            type: array
      security:
      - ApiKeyAuth: []
      summary: Get ComputerLabs based on given filters
      tags:
      - ComputerLab
  /ComputerLab/getComputerLabs:
    get:
      parameters:
      - description: 'Page number (default: 1)'
        in: query
        name: page
        type: integer
      - description: 'Number of results per page (default: 10)'
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.ComputerLab'
            type: array
      security:
      - ApiKeyAuth: []
      summary: Get all ComputerLabs
      tags:
      - ComputerLab
  /ComputerLab/update/{id}:
    put:
      consumes:
      - application/json
      parameters:
      - description: ComputerLab ID
        in: path
        name: id
        required: true
        type: string
      - description: ComputerLab object
        in: body
        name: ComputerLab
        required: true
        schema:
          $ref: '#/definitions/model.ComputerLab'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.ComputerLab'
      security:
      - ApiKeyAuth: []
      summary: Update a ComputerLab
      tags:
      - ComputerLab
  /Course/{id}:
    get:
      parameters:
      - description: Course ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Course'
      security:
      - ApiKeyAuth: []
      summary: Get a Course by ID
      tags:
      - Course
  /Course/create:
    post:
      consumes:
      - application/json
      parameters:
      - description: Course object
        in: body
        name: Course
        required: true
        schema:
          $ref: '#/definitions/model.Course'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/model.Course'
      security:
      - ApiKeyAuth: []
      summary: Create a new Course
      tags:
      - Course
  /Course/delete/{id}:
    delete:
      parameters:
      - description: Course ID
        in: path
        name: id
        required: true
        type: string
      responses: {}
      security:
      - ApiKeyAuth: []
      summary: Delete a Course
      tags:
      - Course
  /Course/filter:
    get:
      parameters:
      - description: Course Name
        in: query
        name: course_name
        type: string
      - description: School ID
        in: query
        name: school_id
        type: string
      - description: Active status
        in: query
        name: active
        type: boolean
      - description: Instructor
        in: query
        name: instructor
        type: string
      - description: Duration in weeks
        in: query
        name: duration_weeks
        type: integer
      - description: Course Credits
        in: query
        name: credits
        type: integer
      - description: Course Fee
        in: query
        name: fee
        type: number
      - description: Course Description
        in: query
        name: description
        type: string
      - description: Syllabus
        in: query
        name: syllabus
        type: string
      - description: Start Date (YYYY-MM-DD)
        in: query
        name: start_date
        type: string
      - description: End Date (YYYY-MM-DD)
        in: query
        name: end_date
        type: string
      - description: Created By
        in: query
        name: created_by
        type: string
      - description: Updated By
        in: query
        name: updated_by
        type: string
      - description: Course ID
        in: query
        name: course_id
        type: string
      - description: 'Page number (default: 1)'
        in: query
        name: page
        type: integer
      - description: 'Number of results per page (default: 10)'
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.Course'
            type: array
      security:
      - ApiKeyAuth: []
      summary: Get Courses based on given filters
      tags:
      - Course
  /Course/getCourses:
    get:
      parameters:
      - description: 'Page number (default: 1)'
        in: query
        name: page
        type: integer
      - description: 'Number of results per page (default: 10)'
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.Course'
            type: array
      security:
      - ApiKeyAuth: []
      summary: Get all Courses
      tags:
      - Course
  /Course/update/{id}:
    put:
      consumes:
      - application/json
      parameters:
      - description: Course ID
        in: path
        name: id
        required: true
        type: string
      - description: Course object
        in: body
        name: Course
        required: true
        schema:
          $ref: '#/definitions/model.Course'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Course'
      security:
      - ApiKeyAuth: []
      summary: Update a Course
      tags:
      - Course
  /Teacher/{id}:
    get:
      parameters:
      - description: Teacher ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Teacher'
      security:
      - ApiKeyAuth: []
      summary: Get a Teacher by ID
      tags:
      - Teacher
  /Teacher/create:
    post:
      consumes:
      - application/json
      parameters:
      - description: Teacher object
        in: body
        name: teacher
        required: true
        schema:
          $ref: '#/definitions/model.Teacher'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/model.Teacher'
      security:
      - ApiKeyAuth: []
      summary: Create a new Teacher
      tags:
      - Teacher
  /Teacher/delete/{id}:
    delete:
      parameters:
      - description: Teacher ID
        in: path
        name: id
        required: true
        type: string
      responses: {}
      security:
      - ApiKeyAuth: []
      summary: Delete a Teacher
      tags:
      - Teacher
  /Teacher/filter:
    get:
      parameters:
      - description: First Name
        in: query
        name: first_name
        type: string
      - description: Last Name
        in: query
        name: last_name
        type: string
      - description: Active status
        in: query
        name: active
        type: boolean
      - description: Created By
        in: query
        name: created_by
        type: string
      - description: Updated By
        in: query
        name: updated_by
        type: string
      - description: Teacher ID
        in: query
        name: teacher_id
        type: string
      - description: Subject Code
        in: query
        name: subject_code
        type: string
      - description: Teacher Type
        in: query
        name: teacher_type
        type: string
      - description: Salary
        in: query
        name: salary
        type: integer
      - description: Skills
        in: query
        name: skills
        type: string
      - description: Joining Date
        in: query
        name: join_date
        type: string
      - description: 'Page number (default: 1)'
        in: query
        name: page
        type: integer
      - description: 'Number of results per page (default: 10)'
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.Teacher'
            type: array
      security:
      - ApiKeyAuth: []
      summary: Get Teachers based on given filters
      tags:
      - Teacher
  /Teacher/getTeachers:
    get:
      parameters:
      - description: 'Page number (default: 1)'
        in: query
        name: page
        type: integer
      - description: 'Number of results per page (default: 10)'
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.Teacher'
            type: array
      security:
      - ApiKeyAuth: []
      summary: Get all Teachers
      tags:
      - Teacher
  /Teacher/update/{id}:
    put:
      consumes:
      - application/json
      parameters:
      - description: Teacher ID
        in: path
        name: id
        required: true
        type: string
      - description: Teacher object
        in: body
        name: teacher
        required: true
        schema:
          $ref: '#/definitions/model.Teacher'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Teacher'
      security:
      - ApiKeyAuth: []
      summary: Update a Teacher
      tags:
      - Teacher
  /college/{id}:
    get:
      parameters:
      - description: College ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.College'
      security:
      - ApiKeyAuth: []
      summary: Get a College by ID
      tags:
      - Colleges
  /college/create:
    post:
      consumes:
      - application/json
      parameters:
      - description: College object
        in: body
        name: College
        required: true
        schema:
          $ref: '#/definitions/model.College'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/model.College'
      security:
      - ApiKeyAuth: []
      summary: Create a College
      tags:
      - Colleges
  /college/delete/{id}:
    delete:
      parameters:
      - description: College ID
        in: path
        name: id
        required: true
        type: string
      responses: {}
      security:
      - ApiKeyAuth: []
      summary: Delete a College
      tags:
      - Colleges
  /college/filter:
    get:
      parameters:
      - description: domain
        in: query
        name: domain
        type: string
      - description: id
        in: query
        name: id
        type: string
      - description: hostel
        in: query
        name: hostel
        type: string
      - description: active
        in: query
        name: active
        type: boolean
      - description: created_by
        in: query
        name: created_by
        type: string
      - description: updated_by
        in: query
        name: updated_by
        type: string
      - description: admin_id
        in: query
        name: admin_id
        type: string
      - description: director_id
        in: query
        name: director_id
        type: string
      - description: principle_id
        in: query
        name: principle_id
        type: string
      - description: lane
        in: query
        name: lane
        type: string
      - description: village
        in: query
        name: village
        type: string
      - description: university_type
        in: query
        name: university_type
        type: string
      - description: city
        in: query
        name: city
        type: string
      - description: district
        in: query
        name: district
        type: string
      - description: pincode
        in: query
        name: pincode
        type: integer
      - description: state
        in: query
        name: state
        type: string
      - description: start date
        in: query
        name: start_date
        type: string
      - description: end date
        in: query
        name: end_date
        type: string
      - description: 'Page number (default: 1)'
        in: query
        name: page
        type: integer
      - description: 'Number of results per page (default: 10)'
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.College'
            type: array
      security:
      - ApiKeyAuth: []
      summary: Get all Colleges based on given filters
      tags:
      - Colleges
  /college/getColleges:
    get:
      parameters:
      - description: 'Page number (default: 1)'
        in: query
        name: page
        type: integer
      - description: 'Number of results per page (default: 10)'
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.College'
            type: array
      security:
      - ApiKeyAuth: []
      summary: Get all Colleges
      tags:
      - Colleges
  /college/update/{id}:
    put:
      consumes:
      - application/json
      parameters:
      - description: College ID
        in: path
        name: id
        required: true
        type: string
      - description: College object
        in: body
        name: College
        required: true
        schema:
          $ref: '#/definitions/model.College'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.College'
      security:
      - ApiKeyAuth: []
      summary: Update a College
      tags:
      - Colleges
  /user/{id}:
    get:
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.User'
      security:
      - ApiKeyAuth: []
      summary: Get a user by ID
      tags:
      - users
  /user/create:
    post:
      consumes:
      - application/json
      parameters:
      - description: User object
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/model.User'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/model.User'
      summary: Create a user
      tags:
      - users
  /user/delete/{id}:
    delete:
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      responses: {}
      security:
      - ApiKeyAuth: []
      summary: Delete a user
      tags:
      - users
  /user/filter:
    get:
      parameters:
      - description: email
        in: query
        name: email
        type: string
      - description: id
        in: query
        name: id
        type: string
      - description: password
        in: query
        name: password
        type: string
      - description: active
        in: query
        name: active
        type: boolean
      - description: created_by
        in: query
        name: created_by
        type: string
      - description: updated_by
        in: query
        name: updated_by
        type: string
      - description: first_name
        in: query
        name: first_name
        type: string
      - description: last_name
        in: query
        name: last_name
        type: string
      - description: lane
        in: query
        name: lane
        type: string
      - description: village
        in: query
        name: village
        type: string
      - description: city
        in: query
        name: city
        type: string
      - description: district
        in: query
        name: district
        type: string
      - description: pincode
        in: query
        name: pincode
        type: integer
      - description: state
        in: query
        name: state
        type: string
      - description: start date
        in: query
        name: start_date
        type: string
      - description: end date
        in: query
        name: end_date
        type: string
      - description: 'Page number (default: 1)'
        in: query
        name: page
        type: integer
      - description: 'Number of results per page (default: 10)'
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.User'
            type: array
      security:
      - ApiKeyAuth: []
      summary: Get all users based on given filters
      tags:
      - users
  /user/getusers:
    get:
      parameters:
      - description: 'Page number (default: 1)'
        in: query
        name: page
        type: integer
      - description: 'Number of results per page (default: 10)'
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.User'
            type: array
      security:
      - ApiKeyAuth: []
      summary: Get all users
      tags:
      - users
  /user/signin:
    post:
      parameters:
      - description: User object
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/model.UserSignIn'
      produces:
      - application/json
      responses:
        "200":
          description: Successful SignIn
          schema:
            type: string
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/model.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: SighIn user
      tags:
      - users
  /user/signup:
    post:
      consumes:
      - application/json
      parameters:
      - description: User object
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/model.User'
      produces:
      - application/json
      responses:
        "200":
          description: Successful SignUp
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: SignUp a user
      tags:
      - users
  /user/update/{id}:
    put:
      consumes:
      - application/json
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      - description: User object
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/model.User'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.User'
      security:
      - ApiKeyAuth: []
      summary: Update a user
      tags:
      - users
schemes:
- http
- https
securityDefinitions:
  ApiKeyAuth:
    in: header
    name: X-Token
    type: apiKey
swagger: "2.0"
