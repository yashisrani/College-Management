basePath: /
definitions:
  model.User:
    properties:
      active:
        description: |-
          Name      Name      `gorm:"embedded" json:"name" binding:"required"` // gorm:embedded to add name and address struct to main struct.
          Address   Address   `gorm:"embedded" json:"address" binding:"required"`
        example: true
        type: boolean
      city:
        type: string
      created_at:
        type: string
      created_by:
        example: user
        type: string
      delete_by:
        example: admin
        type: string
      deleted_at:
        type: string
      district:
        type: string
      email:
        type: string
      first_name:
        type: string
      id:
        type: string
      lane:
        type: string
      last_name:
        type: string
      password:
        type: string
      pincode:
        type: integer
      state:
        type: string
      updated_at:
        type: string
      updated_by:
        example: admin
        type: string
      village:
        type: string
    required:
    - email
    - password
    type: object
host: localhost:8000
info:
  contact: {}
  description: APIs to manage School operations
  title: School-Management
  version: "1.0"
paths:
  /user/{id}:
    get:
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.User'
      security:
      - ApiKeyAuth: []
      summary: Get a user by ID
      tags:
      - users
  /user/create:
    post:
      consumes:
      - application/json
      parameters:
      - description: User object
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/model.User'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/model.User'
      summary: Create a user
      tags:
      - users
  /user/delete/{id}:
    delete:
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      responses: {}
      security:
      - ApiKeyAuth: []
      summary: Delete a user
      tags:
      - users
  /user/filter:
    get:
      parameters:
      - description: email
        in: query
        name: email
        type: string
      - description: id
        in: query
        name: id
        type: string
      - description: password
        in: query
        name: password
        type: string
      - description: active
        in: query
        name: active
        type: boolean
      - description: created_by
        in: query
        name: created_by
        type: string
      - description: updated_by
        in: query
        name: updated_by
        type: string
      - description: first_name
        in: query
        name: first_name
        type: string
      - description: last_name
        in: query
        name: last_name
        type: string
      - description: lane
        in: query
        name: lane
        type: string
      - description: village
        in: query
        name: village
        type: string
      - description: city
        in: query
        name: city
        type: string
      - description: district
        in: query
        name: district
        type: string
      - description: pincode
        in: query
        name: pincode
        type: integer
      - description: state
        in: query
        name: state
        type: string
      - description: start date
        in: query
        name: start_date
        type: string
      - description: end date
        in: query
        name: end_date
        type: string
      - description: 'Page number (default: 1)'
        in: query
        name: page
        type: integer
      - description: 'Number of results per page (default: 10)'
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.User'
            type: array
      security:
      - ApiKeyAuth: []
      summary: Get all users based on given filters
      tags:
      - users
  /user/getusers:
    get:
      parameters:
      - description: 'Page number (default: 1)'
        in: query
        name: page
        type: integer
      - description: 'Number of results per page (default: 10)'
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.User'
            type: array
      security:
      - ApiKeyAuth: []
      summary: Get all users
      tags:
      - users
  /user/update/{id}:
    put:
      consumes:
      - application/json
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      - description: User object
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/model.User'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.User'
      security:
      - ApiKeyAuth: []
      summary: Update a user
      tags:
      - users
schemes:
- http
- https
securityDefinitions:
  ApiKeyAuth:
    in: header
    name: X-Token
    type: apiKey
swagger: "2.0"
