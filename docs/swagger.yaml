basePath: /
definitions:
  model.Address:
    properties:
      city:
        type: string
      district:
        type: string
      lane:
        type: string
      pincode:
        type: integer
      state:
        type: string
      village:
        type: string
    type: object
  model.Name:
    properties:
      first_name:
        type: string
      last_name:
        type: string
    type: object
  model.User:
    properties:
      active:
        description: active is used to see user is active or not active.
        example: true
        type: boolean
      address:
        $ref: '#/definitions/model.Address'
      created_at:
        type: string
      created_by:
        description: |-
          Email     string    `json:"email" gorm:"unique;notnull" binding:"required"`
          Password  string    `json:"password" gorm:"notnull" binding:"required"`
        example: user
        type: string
      delete_by:
        example: admin
        type: string
      deleted_at:
        type: string
      id:
        type: string
      name:
        allOf:
        - $ref: '#/definitions/model.Name'
        description: gorm:embedded to add name and address struct to main struct.
      updated_at:
        type: string
      updated_by:
        example: admin
        type: string
    required:
    - address
    - name
    type: object
host: localhost:8000
info:
  contact: {}
  description: APIs to manage School operations
  title: School-Management
  version: "1.0"
paths:
  /user/{id}:
    get:
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.User'
      security:
      - ApiKeyAuth: []
      summary: Get a user by ID
      tags:
      - users
  /user/create:
    post:
      consumes:
      - application/json
      parameters:
      - description: User object
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/model.User'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/model.User'
      summary: Create a user
      tags:
      - users
  /user/getusers:
    get:
      parameters:
      - description: 'Page number (default: 1)'
        in: query
        name: page
        type: integer
      - description: 'Number of results per page (default: 10)'
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.User'
            type: array
      security:
      - ApiKeyAuth: []
      summary: Get all users
      tags:
      - users
schemes:
- http
- https
securityDefinitions:
  ApiKeyAuth:
    in: header
    name: X-Token
    type: apiKey
swagger: "2.0"
